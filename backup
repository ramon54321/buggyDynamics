

	/* We're going to create a simple diamond made from lines */
	const GLfloat diamond[4][2] = {
	{  0.0,  1.0  }, /* Top point */
	{  1.0,  0.0  }, /* Right point */
	{  0.0, -1.0  }, /* Bottom point */
	{ -1.0,  0.0  } }; /* Left point */

	const GLfloat colors[4][3] = {
	{  1.0,  0.0,  0.0  }, /* Red */
	{  0.0,  1.0,  0.0  }, /* Green */
	{  0.0,  0.0,  1.0  }, /* Blue */
	{  1.0,  1.0,  1.0  } }; /* White */



	/* Allocate and assign a Vertex Array Object to our handle */
	glGenVertexArrays(1, &vao);

	/* Bind our Vertex Array Object as the current used object */
	glBindVertexArray(vao);

	/* Allocate and assign two Vertex Buffer Objects to our handle */
	glGenBuffers(2, vbo);

	/* Bind our first VBO as being the active buffer and storing vertex attributes (coordinates) */
	glBindBuffer(GL_ARRAY_BUFFER, vbo[0]);

	/* Copy the vertex data from diamond to our buffer */
	/* 8 * sizeof(GLfloat) is the size of the diamond array, since it contains 8 GLfloat values */
	glBufferData(GL_ARRAY_BUFFER, 8 * sizeof(GLfloat), diamond, GL_STATIC_DRAW);

	/* Specify that our coordinate data is going into attribute index 0, and contains two floats per vertex */
	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 0, 0);

	/* Enable attribute index 0 as being used */
	glEnableVertexAttribArray(0);

	/* Bind our second VBO as being the active buffer and storing vertex attributes (colors) */
	glBindBuffer(GL_ARRAY_BUFFER, vbo[1]);

	/* Copy the color data from colors to our buffer */
	/* 12 * sizeof(GLfloat) is the size of the colors array, since it contains 12 GLfloat values */
	glBufferData(GL_ARRAY_BUFFER, 12 * sizeof(GLfloat), colors, GL_STATIC_DRAW);

	/* Specify that our color data is going into attribute index 1, and contains three floats per vertex */
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);

	/* Enable attribute index 1 as being used */
	glEnableVertexAttribArray(1);

	/* Read our shaders into the appropriate buffers */
	vertexsource = filetobuf("vertex.shader");
	fragmentsource = filetobuf("fragment.shader");
	std::cout << vertexsource << std::endl;
	std::cout << fragmentsource << std::endl;

	/* Create an empty vertex shader handle */
	vertexshader = glCreateShader(GL_VERTEX_SHADER);

	/* Send the vertex shader source code to GL */
	/* Note that the source code is NULL character terminated. */
	/* GL will automatically detect that therefore the length info can be 0 in this case (the last parameter) */
	glShaderSource(vertexshader, 1, (const GLchar**)&vertexsource, 0);

	/* Compile the vertex shader */
	glCompileShader(vertexshader);

	glGetShaderiv(vertexshader, GL_COMPILE_STATUS, &IsCompiled_VS);
	if(IsCompiled_VS == GL_FALSE)
	{
	   glGetShaderiv(vertexshader, GL_INFO_LOG_LENGTH, &maxLength);

	   /* The maxLength includes the NULL character */
	   vertexInfoLog = (char *)malloc(maxLength);

	   glGetShaderInfoLog(vertexshader, maxLength, &maxLength, vertexInfoLog);

	   /* Handle the error in an appropriate way such as displaying a message or writing to a log file. */
	   /* In this simple program, we'll just leave */
	   free(vertexInfoLog);
	   std::cout << "Er 1" << std::endl;
	   return -3;
	}

	/* Create an empty fragment shader handle */
	fragmentshader = glCreateShader(GL_FRAGMENT_SHADER);

	/* Send the fragment shader source code to GL */
	/* Note that the source code is NULL character terminated. */
	/* GL will automatically detect that therefore the length info can be 0 in this case (the last parameter) */
	glShaderSource(fragmentshader, 1, (const GLchar**)&fragmentsource, 0);

	/* Compile the fragment shader */
	glCompileShader(fragmentshader);

	glGetShaderiv(fragmentshader, GL_COMPILE_STATUS, &IsCompiled_FS);
	if(IsCompiled_FS == GL_FALSE)
	{
	   glGetShaderiv(fragmentshader, GL_INFO_LOG_LENGTH, &maxLength);

	   /* The maxLength includes the NULL character */
	   fragmentInfoLog = (char *)malloc(maxLength);

	   glGetShaderInfoLog(fragmentshader, maxLength, &maxLength, fragmentInfoLog);

	   /* Handle the error in an appropriate way such as displaying a message or writing to a log file. */
	   /* In this simple program, we'll just leave */
	   //free(fragmentInfoLog);

	   for(int i = 0; i < maxLength; i++){
		   std::cout << fragmentInfoLog[i];
	   }

	   std::cout << "Er 2" << std::endl;
	   return -3;
	}

	/* If we reached this point it means the vertex and fragment shaders compiled and are syntax error free. */
	/* We must link them together to make a GL shader program */
	/* GL shader programs are monolithic. It is a single piece made of 1 vertex shader and 1 fragment shader. */
	/* Assign our program handle a "name" */
	shaderprogram = glCreateProgram();

	/* Attach our shaders to our program */
	glAttachShader(shaderprogram, vertexshader);
	glAttachShader(shaderprogram, fragmentshader);

	/* Bind attribute index 0 (coordinates) to in_Position and attribute index 1 (color) to in_Color */
	/* Attribute locations must be setup before calling glLinkProgram. */
	glBindAttribLocation(shaderprogram, 0, "in_Position");
	glBindAttribLocation(shaderprogram, 1, "in_Color");

	/* Link our program */
	/* At this stage, the vertex and fragment programs are inspected, optimized and a binary code is generated for the shader. */
	/* The binary code is uploaded to the GPU, if there is no error. */
	glLinkProgram(shaderprogram);

	/* Again, we must check and make sure that it linked. If it fails, it would mean either there is a mismatch between the vertex */
	/* and fragment shaders. It might be that you have surpassed your GPU's abilities. Perhaps too many ALU operations or */
	/* too many texel fetch instructions or too many interpolators or dynamic loops. */

	glGetProgramiv(shaderprogram, GL_LINK_STATUS, (int *)&IsLinked);
	if(IsLinked == GL_FALSE)
	{
	   /* Noticed that glGetProgramiv is used to get the length for a shader program, not glGetShaderiv. */
	   glGetProgramiv(shaderprogram, GL_INFO_LOG_LENGTH, &maxLength);

	   /* The maxLength includes the NULL character */
	   shaderProgramInfoLog = (char *)malloc(maxLength);

	   /* Notice that glGetProgramInfoLog, not glGetShaderInfoLog. */
	   glGetProgramInfoLog(shaderprogram, maxLength, &maxLength, shaderProgramInfoLog);

	   /* Handle the error in an appropriate way such as displaying a message or writing to a log file. */
	   /* In this simple program, we'll just leave */
	   free(shaderProgramInfoLog);
	   std::cout << "Er 3" << std::endl;
	   return -3;
	}